{"version":3,"file":"static/js/999.9929fbea.chunk.js","mappings":"8OAIaA,EAAkB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACpCC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,0BACGH,EADH,KACWC,EAAQ,KACjB,mBAAQG,KAAK,SAASL,GAAIA,EAAIM,QAPb,SAAAC,GACnBJ,GAASK,EAAAA,EAAAA,IAAcD,EAAME,OAAOT,IACrC,EAKG,sBAKL,ECnBYU,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAAnB,EAErBC,EAAe,SAAAH,GAAK,OAAIA,EAAMC,SAASG,MAAnB,EAEpBC,EAAoB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,ECCzBC,EAAc,WACzB,IAAMN,GAAWO,EAAAA,EAAAA,IAAYH,GACvBD,GAASI,EAAAA,EAAAA,IAAYL,GAO3B,OACE,wBANuB,SAAAF,GAAQ,OAC/BA,EAASG,QAAO,SAAAK,GAAI,OAClBA,EAAKnB,KAAKoB,cAAcC,SAASP,EAAOM,cADtB,GADW,CAO5BE,CAAiBX,GAAUY,KAAI,gBAAGxB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OAC9B,SAACH,EAAD,CAA0BC,GAAIA,EAAIC,KAAMA,EAAMC,OAAQA,GAAhCF,EADQ,KAKrC,ECrBYyB,EAAiB,SAAAd,GAAK,OAAIA,EAAMC,QAAV,E,mBCEtBc,EAAOC,EAAAA,GAAAA,KAAH,8IASJC,EAAQD,EAAAA,GAAAA,EAAH,sCCNLE,EAAc,WACzB,IAAM1B,GAAWC,EAAAA,EAAAA,MACXQ,GAAWO,EAAAA,EAAAA,IAAYM,GAkB7B,OACE,UAACC,EAAD,CAAMI,SAjBa,SAAAvB,GACnBA,EAAMwB,iBACN,IAAMC,EAAOzB,EAAME,OACfG,EAASK,MAAMgB,MAAK,SAAAb,GAAI,OAAIA,EAAKnB,OAAS+B,EAAKE,SAASjC,KAAKkC,KAArC,IAC1BC,MAAM,GAAD,OAAIJ,EAAKE,SAASjC,KAAKkC,MAAvB,8BAGPhC,GACEkC,EAAAA,EAAAA,IAAW,CACTpC,KAAM+B,EAAKE,SAASjC,KAAKkC,MACzBjC,OAAQ8B,EAAKE,SAAShC,OAAOiC,SAGjCH,EAAKM,QACN,EAG+BC,aAAa,MAA3C,WACE,SAACX,EAAD,oBACA,kBACEvB,KAAK,OACLJ,KAAK,OACLuC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,SAACd,EAAD,sBACA,kBACEvB,KAAK,MACLJ,KAAK,SACLuC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,mBAAQrC,KAAK,SAAb,2BAGL,E,UC5CYuB,EAAQD,EAAAA,GAAAA,MAAH,qECELgB,EAAS,WACpB,IAAMxC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAAC,EAAD,oCAEE,kBAAOC,KAAK,OAAOJ,KAAK,SAAS2C,SAPhB,SAAArC,GACnBJ,GAAS0C,EAAAA,EAAAA,GAAUtC,EAAME,OAAO0B,OACjC,MAQF,ECRc,SAASW,IACtB,IAAM3C,GAAWC,EAAAA,EAAAA,MACX2C,GAAY5B,EAAAA,EAAAA,IAAYT,GAM9B,OAJAsC,EAAAA,EAAAA,YAAU,WACR7C,GAAS8C,EAAAA,EAAAA,MACV,GAAE,CAAC9C,KAGF,iCACE,SAAC+C,EAAA,EAAD,WACE,gDAEF,SAACrB,EAAD,KACA,SAACc,EAAD,KACA,yBAAMI,GAAa,4BACnB,SAAC7B,EAAD,MAGL,C","sources":["components/ContactListItem/ContactListItem.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","redux/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = event => {\n    dispatch(deleteContact(event.target.id));\n  };\n\n  return (\n    <li>\n      {name}: {number}{' '}\n      <button type=\"button\" id={id} onClick={handleDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { selectAllContacts, selectFilter } from 'redux/contacts/selectors';\n// import { selectFilter } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts =>\n    contacts.filter(item =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n  return (\n    <ul>\n      {filteredContacts(contacts).map(({ id, name, number }) => (\n        <ContactListItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ul>\n  );\n};\n","export const selectContacts = state => state.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.contacts.filter;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  border: 1px solid black;\n  padding: 20px;\n  margin: 0;\n`;\n\nexport const Label = styled.p`\n  margin: 0;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Form, Label } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmin = event => {\n    event.preventDefault();\n    const form = event.target;\n    if (contacts.items.find(item => item.name === form.elements.name.value)) {\n      alert(`${form.elements.name.value} is already in contacts.`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: form.elements.name.value,\n        number: form.elements.number.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmin} autoComplete=\"off\">\n      <Label>Name</Label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <Label>Number</Label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/slice';\nimport { Label } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" onChange={handleChange} />\n    </Label>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["ContactListItem","id","name","number","dispatch","useDispatch","type","onClick","event","deleteContact","target","selectLoading","state","contacts","loading","selectFilter","filter","selectAllContacts","items","ContactList","useSelector","item","toLowerCase","includes","filteredContacts","map","selectContacts","Form","styled","Label","ContactForm","onSubmit","preventDefault","form","find","elements","value","alert","addContact","reset","autoComplete","pattern","title","required","Filter","onChange","setFilter","Contacts","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}