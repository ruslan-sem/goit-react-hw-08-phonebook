{"version":3,"file":"static/js/184.f7127232.chunk.js","mappings":"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","sources":["redux/operations.js","components/ContactListItem/ContactListItem.js","redux/selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","redux/contacts/selectors.js","pages/Contacts.js"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://63efccf1c59531ccf1772da6.mockapi.io';\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchAll',\n  async (_, thunkAPI) => {\n    try {\n      const response = await axios.get('/contacts');\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async (contact, thunkAPI) => {\n    try {\n      const response = await axios.post('/contacts', contact);\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (contactId, thunkAPI) => {\n    try {\n      const response = await axios.delete(`/contacts/${contactId}`);\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = event => {\n    dispatch(deleteContact(event.target.id));\n  };\n\n  return (\n    <li>\n      {name}: {number}{' '}\n      <button type=\"button\" id={id} onClick={handleDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","export const selectContacts = state => state.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts =>\n    contacts.contacts.filter(item =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n  return (\n    <ul>\n      {filteredContacts(contacts).map(({ id, name, number }) => (\n        <ContactListItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  border: 1px solid black;\n  padding: 20px;\n  margin: 0;\n`;\n\nexport const Label = styled.p`\n  margin: 0;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport { Form, Label } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmin = event => {\n    event.preventDefault();\n    const form = event.target;\n    if (\n      contacts.contacts.find(item => item.name === form.elements.name.value)\n    ) {\n      alert(`${form.elements.name.value} is already in contacts.`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: form.elements.name.value,\n        number: form.elements.number.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmin} autoComplete=\"off\">\n      <Label>Name</Label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <Label>Number</Label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  );\n};\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["axios","createAsyncThunk","_","thunkAPI","response","data","rejectWithValue","message","addContact","contact","deleteContact","contactId","ContactListItem","id","name","number","dispatch","useDispatch","type","onClick","event","target","selectContacts","state","contacts","selectFilter","filter","ContactList","useSelector","item","toLowerCase","includes","filteredContacts","map","Form","styled","Label","ContactForm","onSubmit","preventDefault","form","find","elements","value","alert","reset","autoComplete","pattern","title","required","selectLoading","loading","Contacts","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}